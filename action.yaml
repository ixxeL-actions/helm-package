---
name: 'Helm-package'
description: 'Packaging helm charts.'
author: 'ixxeL'
inputs:
  chart-name:
    description: 'The chart name'
    required: true
  app-version:
    description: 'set the appVersion on the chart to this version'
    required: true
  version:
    description: 'set the version on the chart to this semver version'
    required: true
  destination:
    description: 'location to write the chart.'
    required: false
    default: '.'
  working-dir:
    description: 'file to scan'
    required: false
    default: './chart/argo-cd'

runs:
  using: "composite"
  steps:
    - id: helm-package
      run: |
        set +e
        echo -e "${BLUE}[ STEP - Helm-chart packaging ] > Packaging Helm chart.${BLANK}"
        echo -e "${CYAN}[ INFO ] > Helm version.${BLANK}"
        helm version --short
        echo -e "${YELLOW}[ EXECUTING ] > Packaging helm chart ${{ inputs.working-dir }}.${BLANK}"

        if [[ -d ${{ inputs.working-dir }} ]]
        then
          echo -e "${GREEN}[ CHECK SUCCESS ] > Directory exists, proceeding packaging.${BLANK}"
        else
          echo -e "${RED}[ CHECK ERROR ] > Directory doesn't exist, canceling packaging.${BLANK}"
          exit 1
        fi

        echo -e "${CYAN}[ INFO ] > The helm chart ${{ inputs.chart-name }} will be packaged as version ${{ inputs.version }} and appVersion ${{ inputs.app-version }} on directory target ${{ inputs.destination }}${BLANK}"
        yq e -i '.version ="${{ inputs.version }}"' ${{ inputs.working-dir }}/Chart.yaml
        yq e -i '.appVersion ="${{ inputs.app-version }}"' ${{ inputs.working-dir }}/Chart.yaml
        yq e -i '.name ="${{ inputs.chart-name }}"' ${{ inputs.working-dir }}/Chart.yaml

        PKG_OUTPUT=$(helm package ${{ inputs.working-dir }} --destination=${{ inputs.destination }} \
                                               --version=${{ inputs.version }} \
                                               --app-version=${{ inputs.app-version }})

        if [[ $? = 0 ]]
        then
          echo ::set-output name=CHART_NAME::${{ inputs.chart-name }}
          echo ::set-output name=CHART_VERSION::${{ inputs.version }} 
          echo ::set-output name=CHART_APP_VERSION::${{ inputs.app-version }}
          echo -e "${CYAN}[ INFO ] > Package created --> ${PKG_OUTPUT}${BLANK}"
          ls -la --color
          echo -e "${GREEN}[ CHECK SUCCESS ] > Helm packaging succeeded without any error.${BLANK}"
        else
          echo -e "${PURPLE}[ CHECK ERROR ] > Helm packaging didn't succeed !${BLANK}"
          exit 1
        fi
      shell: bash
      env:
        RED: \033[1;31m
        GREEN: \033[1;32m
        YELLOW: \033[1;33m
        BLUE: \033[1;34m
        PURPLE: \033[1;35m
        CYAN: \033[1;36m
        BLANK: \033[0m